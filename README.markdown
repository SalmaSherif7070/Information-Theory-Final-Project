# Vector Quantization Image Compression

## Overview
This project implements vector quantization (VQ) for RGB image compression, dividing images into 2x2 blocks and representing them with codebook indices for each channel (Red, Green, Blue). It trains codebooks on images from nature, faces, and animals domains and evaluates compression quality and efficiency on test images.

## Directory Structure
The project follows this directory structure:

```
Final Project/
├── bin/                        // Compiled Java class files
├── src/                        // Java source code
│   ├── VectorQuantization.java // Main class to orchestrate the process
│   ├── Codebook.java           // Class to manage codebook generation and storage
│   ├── ImageProcessor.java     // Class to handle image loading, RGB splitting, and block extraction
│   ├── VQCompressor.java       // Class to handle compression and decompression
│   ├── QualityMetrics.java     // Class to calculate MSE, PSNR, and compression ratio
├── lib/                        // Directory for external libraries (currently unused)
├── data/
│   ├── input/
│   │   ├── train/
│   │   │   ├── nature/     // 10 images (e.g., Nature 1.jpg to Nature 10.jpg)
│   │   │   ├── faces/      // 10 images (e.g., Faces 1.jpg to Faces 10.jpg)
│   │   │   ├── animals/    // 10 images (e.g., Animals 1.jpg to Animals 10.jpg)
│   │   ├── test/
│   │   │   ├── nature/     // 5 images (e.g., Nature 1.jpg to Nature 5.jpg)
│   │   │   ├── faces/      // 5 images (e.g., Faces 1.jpg to Faces 5.jpg)
│   │   │   ├── animals/    // 5 images (e.g., Animals 1.jpg to Animals 5.jpg)
│   ├── output/
│   │   ├── codebooks/      // Stores R, G, B codebooks (e.g., red_codebook.txt)
│   │   ├── compressed/     // Stores compressed image indices (e.g., nature1.txt)
│   │   ├── decompressed/   // Stores reconstructed images (e.g., nature1_decompressed.png)
```

- **bin/**: Contains compiled `.class` files generated by `javac`. Created automatically during compilation.
- **src/**: Contains the Java source files:
  - `VectorQuantization.java`: Orchestrates codebook generation, compression, decompression, and metric calculation.
  - `Codebook.java`: Manages codebook creation, loading, and vector quantization using centroid splitting and k-means.
  - `ImageProcessor.java`: Loads images, splits them into RGB channels, extracts 2x2 blocks, and saves reconstructed images.
  - `VQCompressor.java`: Compresses blocks to indices and reconstructs images from indices.
  - `QualityMetrics.java`: Calculates Mean Squared Error (MSE), Peak Signal-to-Noise Ratio (PSNR), and compression ratio.
- **lib/**: Intended for external libraries, currently unused as the project relies on standard Java libraries.
- **data/input/train/**: Stores training images for codebook generation, with 10 JPG images per domain (nature, faces, animals).
- **data/input/test/**: Stores test images for compression and evaluation, with 5 JPG images per domain.
- **data/output/**:
  - `codebooks/`: Stores codebook files (`red_codebook.txt`, `green_codebook.txt`, `blue_codebook.txt`), each with 256 vectors of 4 values.
  - `compressed/`: Stores text files with binary indices for compressed images (e.g., `nature1.txt` for Nature 1.jpg).
  - `decompressed/`: Stores reconstructed PNG images (e.g., `nature1_decompressed.png`).

**Note**: Ensure images are in JPG format and follow the naming convention (e.g., `Nature 1.jpg`). Output directories are created automatically if they don’t exist.

## How to Run
### Prerequisites
- **Java Development Kit (JDK)**: Version 8 or higher.
- **Input Images**: Placed in `data/input/train/{nature,faces,animals}/` (10 images per domain) and `data/input/test/{nature,faces,animals}/` (5 images per domain).
- **Disk Space**: Sufficient space for output files in `data/output/`.
- **Memory**: At least 4GB RAM (use `-Xmx4g` for large images).

### Steps
1. **Set Up Project**:
   - Place source files in `Final Project/src/`.
   - Ensure training images are in `Final Project/data/input/train/{nature,faces,animals}/`.
   - Ensure test images are in `Final Project/data/input/test/{nature,faces,animals}/`.
   - Verify the directory structure matches the one above.

2. **Compile the Code**:
   ```bash
   cd Final\ Project
   javac -d bin src/*.java
   ```
   - Compiles all `.java` files in `src/` to `.class` files in `bin/`.
   - Creates `bin/` if it doesn’t exist.

3. **Run the Program**:
   ```bash
   java -Xmx4g -cp bin VectorQuantization
   ```
   - Executes the main class (`VectorQuantization`) from the `bin/` directory.
   - `-Xmx4g`: Allocates 4GB of memory to handle large images.
   - **Actions Performed**:
     - Checks for codebooks in `data/output/codebooks/`.
     - Generates codebooks if missing or invalid, using training images.
     - Compresses test images, saving indices to `data/output/compressed/`.
     - Decompresses images, saving results to `data/output/decompressed/`.
     - Outputs MSE and compression ratio for each test image and domain averages.

4. **Verify Outputs**:
   - Check `data/output/codebooks/` for `red_codebook.txt`, `green_codebook.txt`, `blue_codebook.txt`.
   - Check `data/output/compressed/` for `.txt` files (e.g., `nature1.txt`).
   - Check `data/output/decompressed/` for `.png` files (e.g., `nature1_decompressed.png`).
   - Review console output for metrics (MSE, compression ratio).

### Additional Notes
- **Codebook Reuse**: If valid codebooks exist, the program skips generation. To regenerate, delete `data/output/codebooks/*.txt`.
- **Troubleshooting**:
  - **Image Not Found**: Verify paths and names in `data/input/`.
  - **OutOfMemoryError**: Increase memory with `-Xmx8g`.
  - **Compilation Errors**: Ensure all `.java` files are in `src/` and JDK is installed.
- **Performance**: For faster execution, reduce `codebookSize` in `VectorQuantization.java` (e.g., from 256 to 16) or use fewer training images.

## Quality Comparison
The quality of VQ-compressed images is measured using Mean Squared Error (MSE), which quantifies pixel-level differences between original and reconstructed images. Lower MSE indicates better quality. Test results are:

- **Nature Domain**:
  - Nature 1.jpg: MSE = 36.85
  - Nature 2.jpg: MSE = 17.06
  - Nature 3.jpg: MSE = 13.45
  - Nature 4.jpg: MSE = 13.42
  - Nature 5.jpg: MSE = 8.32
  - **Average MSE**: 17.82
- **Faces Domain**:
  - Faces 1.jpg: MSE = 7.45
  - Faces 2.jpg: MSE = 6.05
  - Faces 3.jpg: MSE = 6.05
  - Faces 4.jpg: MSE = 6.19
  - Faces 5.jpg: MSE = 19.14
  - **Average MSE**: 8.97
- **Animals Domain**:
  - Animals 1.jpg: MSE = 8.62
  - Animals 2.jpg: MSE = 11.24
  - Animals 3.jpg: MSE = 8.70
  - Animals 4.jpg: MSE = 6.44
  - Animals 5.jpg: MSE = 13.93
  - **Average MSE**: 9.78

### Analysis
- Faces (avg MSE 8.97) and animals (avg MSE 9.78) show better quality than nature (avg MSE 17.82), likely due to smoother textures in faces and animals. Higher MSE (e.g., Nature 1.jpg: 36.85) indicates more distortion in complex scenes with diverse colors or textures.
- The variation in MSE reflects image complexity, with simpler images (e.g., Faces 2.jpg: 6.05) retaining more fidelity than complex ones (e.g., Nature 1.jpg: 36.85).

## Compression Ratio
VQ’s compression ratio is the ratio of original to compressed image bits, assuming no codebook overhead. Each RGB image uses 24 bits per pixel. Each 2x2 block is represented by three 8-bit indices (one per channel).

### Calculation
- **Original Bits**: For an image of width \( W \) and height \( H \):
  \[
  \text{Original Bits} = W \times H \times 24
  \]
- **Compressed Bits**: With \( \frac{W}{2} \times \frac{H}{2} \) blocks, each with 3 indices (8 bits each):
  \[
  \text{Compressed Bits} = \left( \frac{W}{2} \times \frac{H}{2} \right) \times 8 \times 3
  \]
- **Compression Ratio**:
  \[
  \text{Compression Ratio} = \frac{W \times H \times 24}{\left( \frac{W}{2} \times \frac{H}{2} \right) \times 8 \times 3} = \frac{24}{6} = 4
  \]
- **Result**: A consistent 4:1 ratio across all test images, reducing data size by 75%.

### Notes
- The fixed 4:1 ratio assumes uniform block division and no metadata or codebook storage costs.
- The compression is lossy, with quality trade-offs reflected in the MSE values.

## Conclusion
VQ achieves a 4:1 compression ratio with quality varying by domain (best for faces, worst for nature). The clear directory structure and straightforward run instructions make the project easy to execute. The implementation is efficient, leveraging codebook reuse to minimize redundant computation, and provides a robust framework for image compression analysis.